package FileFormat; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-14")
public class SampleThriftObject implements org.apache.thrift.TBase<SampleThriftObject, SampleThriftObject._Fields>, java.io.Serializable, Cloneable, Comparable<SampleThriftObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SampleThriftObject");

  private static final org.apache.thrift.protocol.TField COL_A_FIELD_DESC = new org.apache.thrift.protocol.TField("col_a", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COL_B_FIELD_DESC = new org.apache.thrift.protocol.TField("col_b", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COL_C_FIELD_DESC = new org.apache.thrift.protocol.TField("col_c", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SampleThriftObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SampleThriftObjectTupleSchemeFactory());
  }

  public String col_a; // required
  public String col_b; // required
  public String col_c; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COL_A((short)10, "col_a"),
    COL_B((short)20, "col_b"),
    COL_C((short)30, "col_c");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // COL_A
          return COL_A;
        case 20: // COL_B
          return COL_B;
        case 30: // COL_C
          return COL_C;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COL_A, new org.apache.thrift.meta_data.FieldMetaData("col_a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_B, new org.apache.thrift.meta_data.FieldMetaData("col_b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_C, new org.apache.thrift.meta_data.FieldMetaData("col_c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SampleThriftObject.class, metaDataMap);
  }

  public SampleThriftObject() {
  }

  public SampleThriftObject(
    String col_a,
    String col_b,
    String col_c)
  {
    this();
    this.col_a = col_a;
    this.col_b = col_b;
    this.col_c = col_c;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SampleThriftObject(SampleThriftObject other) {
    if (other.isSetCol_a()) {
      this.col_a = other.col_a;
    }
    if (other.isSetCol_b()) {
      this.col_b = other.col_b;
    }
    if (other.isSetCol_c()) {
      this.col_c = other.col_c;
    }
  }

  public SampleThriftObject deepCopy() {
    return new SampleThriftObject(this);
  }

  @Override
  public void clear() {
    this.col_a = null;
    this.col_b = null;
    this.col_c = null;
  }

  public String getCol_a() {
    return this.col_a;
  }

  public SampleThriftObject setCol_a(String col_a) {
    this.col_a = col_a;
    return this;
  }

  public void unsetCol_a() {
    this.col_a = null;
  }

  /** Returns true if field col_a is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_a() {
    return this.col_a != null;
  }

  public void setCol_aIsSet(boolean value) {
    if (!value) {
      this.col_a = null;
    }
  }

  public String getCol_b() {
    return this.col_b;
  }

  public SampleThriftObject setCol_b(String col_b) {
    this.col_b = col_b;
    return this;
  }

  public void unsetCol_b() {
    this.col_b = null;
  }

  /** Returns true if field col_b is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_b() {
    return this.col_b != null;
  }

  public void setCol_bIsSet(boolean value) {
    if (!value) {
      this.col_b = null;
    }
  }

  public String getCol_c() {
    return this.col_c;
  }

  public SampleThriftObject setCol_c(String col_c) {
    this.col_c = col_c;
    return this;
  }

  public void unsetCol_c() {
    this.col_c = null;
  }

  /** Returns true if field col_c is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_c() {
    return this.col_c != null;
  }

  public void setCol_cIsSet(boolean value) {
    if (!value) {
      this.col_c = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COL_A:
      if (value == null) {
        unsetCol_a();
      } else {
        setCol_a((String)value);
      }
      break;

    case COL_B:
      if (value == null) {
        unsetCol_b();
      } else {
        setCol_b((String)value);
      }
      break;

    case COL_C:
      if (value == null) {
        unsetCol_c();
      } else {
        setCol_c((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COL_A:
      return getCol_a();

    case COL_B:
      return getCol_b();

    case COL_C:
      return getCol_c();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COL_A:
      return isSetCol_a();
    case COL_B:
      return isSetCol_b();
    case COL_C:
      return isSetCol_c();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SampleThriftObject)
      return this.equals((SampleThriftObject)that);
    return false;
  }

  public boolean equals(SampleThriftObject that) {
    if (that == null)
      return false;

    boolean this_present_col_a = true && this.isSetCol_a();
    boolean that_present_col_a = true && that.isSetCol_a();
    if (this_present_col_a || that_present_col_a) {
      if (!(this_present_col_a && that_present_col_a))
        return false;
      if (!this.col_a.equals(that.col_a))
        return false;
    }

    boolean this_present_col_b = true && this.isSetCol_b();
    boolean that_present_col_b = true && that.isSetCol_b();
    if (this_present_col_b || that_present_col_b) {
      if (!(this_present_col_b && that_present_col_b))
        return false;
      if (!this.col_b.equals(that.col_b))
        return false;
    }

    boolean this_present_col_c = true && this.isSetCol_c();
    boolean that_present_col_c = true && that.isSetCol_c();
    if (this_present_col_c || that_present_col_c) {
      if (!(this_present_col_c && that_present_col_c))
        return false;
      if (!this.col_c.equals(that.col_c))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_col_a = true && (isSetCol_a());
    list.add(present_col_a);
    if (present_col_a)
      list.add(col_a);

    boolean present_col_b = true && (isSetCol_b());
    list.add(present_col_b);
    if (present_col_b)
      list.add(col_b);

    boolean present_col_c = true && (isSetCol_c());
    list.add(present_col_c);
    if (present_col_c)
      list.add(col_c);

    return list.hashCode();
  }

  @Override
  public int compareTo(SampleThriftObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCol_a()).compareTo(other.isSetCol_a());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_a()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_a, other.col_a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol_b()).compareTo(other.isSetCol_b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_b, other.col_b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol_c()).compareTo(other.isSetCol_c());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_c()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_c, other.col_c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SampleThriftObject(");
    boolean first = true;

    sb.append("col_a:");
    if (this.col_a == null) {
      sb.append("null");
    } else {
      sb.append(this.col_a);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col_b:");
    if (this.col_b == null) {
      sb.append("null");
    } else {
      sb.append(this.col_b);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col_c:");
    if (this.col_c == null) {
      sb.append("null");
    } else {
      sb.append(this.col_c);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SampleThriftObjectStandardSchemeFactory implements SchemeFactory {
    public SampleThriftObjectStandardScheme getScheme() {
      return new SampleThriftObjectStandardScheme();
    }
  }

  private static class SampleThriftObjectStandardScheme extends StandardScheme<SampleThriftObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SampleThriftObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 10: // COL_A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col_a = iprot.readString();
              struct.setCol_aIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COL_B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col_b = iprot.readString();
              struct.setCol_bIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // COL_C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col_c = iprot.readString();
              struct.setCol_cIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SampleThriftObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.col_a != null) {
        oprot.writeFieldBegin(COL_A_FIELD_DESC);
        oprot.writeString(struct.col_a);
        oprot.writeFieldEnd();
      }
      if (struct.col_b != null) {
        oprot.writeFieldBegin(COL_B_FIELD_DESC);
        oprot.writeString(struct.col_b);
        oprot.writeFieldEnd();
      }
      if (struct.col_c != null) {
        oprot.writeFieldBegin(COL_C_FIELD_DESC);
        oprot.writeString(struct.col_c);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SampleThriftObjectTupleSchemeFactory implements SchemeFactory {
    public SampleThriftObjectTupleScheme getScheme() {
      return new SampleThriftObjectTupleScheme();
    }
  }

  private static class SampleThriftObjectTupleScheme extends TupleScheme<SampleThriftObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SampleThriftObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCol_a()) {
        optionals.set(0);
      }
      if (struct.isSetCol_b()) {
        optionals.set(1);
      }
      if (struct.isSetCol_c()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCol_a()) {
        oprot.writeString(struct.col_a);
      }
      if (struct.isSetCol_b()) {
        oprot.writeString(struct.col_b);
      }
      if (struct.isSetCol_c()) {
        oprot.writeString(struct.col_c);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SampleThriftObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.col_a = iprot.readString();
        struct.setCol_aIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col_b = iprot.readString();
        struct.setCol_bIsSet(true);
      }
      if (incoming.get(2)) {
        struct.col_c = iprot.readString();
        struct.setCol_cIsSet(true);
      }
    }
  }

}

